{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE ViewPatterns #-}
{-# LANGUAGE InstanceSigs #-}
-- {-# OPTIONS_GHC
-fno-warn-unused-binds -fno-warn-unused-imports -fcontext-stack=328 #-}

module {{title}}.API
  -- * Client and Server
  ( ServerConfig(..)
  , run{{title}}Server
  , {{title}}API
  ) where

import {{title}}.Types

import Data.Aeson (FromJSON(..), ToJSON(..), Value, withText)
import Data.Aeson.Types (Parser)
import Data.Proxy (Proxy(..))
import Data.Text (Text, unpack)
import Text.Read (readMaybe)
import Data.Text.Read (decimal)
import Data.Either (fromRight)
import Data.Tuple (fst)
import qualified Data.Text as T
import Data.Time.Calendar (fromGregorian)
import GHC.Generics (Generic)
import Network.HTTP.Types (status400)
import Servant (Server, serve, Handler)
import Servant.API
import Servant.API.Verbs (StdMethod(..), Verb)
import Servant.Checked.Exceptions (Envelope, ErrStatus(..), Throws, NoThrow, pureSuccEnvelope, pureErrEnvelope)
import Web.FormUrlEncoded(ToForm, FromForm)
import Network.Wai (Application)

{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}{{#hasFormParams}}
data {{vendorExtensions.x-formName}} = {{vendorExtensions.x-formName}}
  { {{#formParams}}{{vendorExtensions.x-formPrefix}}{{vendorExtensions.x-formParamName}} :: {{dataType}}{{#hasMore}}
  , {{/hasMore}}{{/formParams}}
  } deriving (Show, Eq, Generic)

instance FromFormUrlEncoded {{vendorExtensions.x-formName}}
instance ToFormUrlEncoded {{vendorExtensions.x-formName}}
    {{/hasFormParams}}{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}

{{#apiInfo}}
-- status code 4xx
{{#errStatuses}}{{#errStatus}}
data {{vendorExtensions.x-statusName}} = {{vendorExtensions.x-statusName}} deriving (Eq, Read, Show)
instance ToJSON {{vendorExtensions.x-statusName}} where
  toJSON :: {{vendorExtensions.x-statusName}} -> Value
  toJSON _ = toJSON . show $ "{{vendorExtensions.x-errMessage}}"
instance FromJSON {{vendorExtensions.x-statusName}} where
  parseJSON :: Value -> Parser {{vendorExtensions.x-statusName}}
  parseJSON = withText "{{vendorExtensions.x-statusName}}" $
    maybe (fail "failed with {{vendorExtensions.x-statusName}}") pure . readMaybe . T.unpack
instance ErrStatus {{vendorExtensions.x-statusName}} where
  toErrStatus :: {{vendorExtensions.x-statusName}} -> Status
  toErrStatus _ = status{{vendorExtensions.x-statusCode}}
{{/errStatus}}{{/errStatuses}}
{{/apiInfo}}

{{#apiInfo}}
-- | Servant type-level API, generated from the Swagger spec for {{title}}.
type {{title}}API
    =    {{#apis}}{{#operations}}{{#operation}}{{& vendorExtensions.x-routeType}} -- '{{operationId}}' route, tags: '{{vendorExtensions.x-tags}}'{{#hasMore}}
    :<|> {{/hasMore}}{{/operation}}{{/operations}}{{#hasMore}}
    :<|> {{/hasMore}}{{/apis}}
{{/apiInfo}}

-- | List of elements parsed from a query.
newtype QueryList (p :: CollectionFormat) a = QueryList
  { fromQueryList :: [a]
  } deriving (Functor, Applicative, Monad, Foldable, Traversable)

-- | Formats in which a list can be encoded into a HTTP path.
data CollectionFormat
  = CommaSeparated -- ^ CSV format for multiple parameters.
  | SpaceSeparated -- ^ Also called "SSV"
  | TabSeparated -- ^ Also called "TSV"
  | PipeSeparated -- ^ `value1|value2|value2`
  | MultiParamArray -- ^ Using multiple GET parameters, e.g. `foo=bar&foo=baz`. Only for GET params.

instance FromHttpApiData a => FromHttpApiData (QueryList 'CommaSeparated a) where
  parseQueryParam = parseSeparatedQueryList ','

instance FromHttpApiData a => FromHttpApiData (QueryList 'TabSeparated a) where
  parseQueryParam = parseSeparatedQueryList '\t'

instance FromHttpApiData a => FromHttpApiData (QueryList 'SpaceSeparated a) where
  parseQueryParam = parseSeparatedQueryList ' '

instance FromHttpApiData a => FromHttpApiData (QueryList 'PipeSeparated a) where
  parseQueryParam = parseSeparatedQueryList '|'

instance FromHttpApiData a => FromHttpApiData (QueryList 'MultiParamArray a) where
  parseQueryParam = error "unimplemented FromHttpApiData for MultiParamArray collection format"

parseSeparatedQueryList :: FromHttpApiData a => Char -> Text -> Either Text (QueryList p a)
parseSeparatedQueryList char = fmap QueryList . mapM parseQueryParam . T.split (== char)

instance ToHttpApiData a => ToHttpApiData (QueryList 'CommaSeparated a) where
  toQueryParam = formatSeparatedQueryList ','

instance ToHttpApiData a => ToHttpApiData (QueryList 'TabSeparated a) where
  toQueryParam = formatSeparatedQueryList '\t'

instance ToHttpApiData a => ToHttpApiData (QueryList 'SpaceSeparated a) where
  toQueryParam = formatSeparatedQueryList ' '

instance ToHttpApiData a => ToHttpApiData (QueryList 'PipeSeparated a) where
  toQueryParam = formatSeparatedQueryList '|'

instance ToHttpApiData a => ToHttpApiData (QueryList 'MultiParamArray a) where
  toQueryParam = error "unimplemented ToHttpApiData for MultiParamArray collection format"

formatSeparatedQueryList :: ToHttpApiData a => Char ->  QueryList p a -> Text
formatSeparatedQueryList char = T.intercalate (T.singleton char) . map toQueryParam . fromQueryList

{{!example funcs}}

{{#apiInfo}}
{{titleLower}}Server :: Server {{title}}API
{{titleLower}}Server = {{#apis}}{{#operations}}{{#operation}}{{operationId}}{{#hasMore}}
                  :<|> {{/hasMore}}{{/operation}}{{/operations}}{{#hasMore}}
                  :<|> {{/hasMore}}{{/apis}}
{{/apiInfo}}

{{#apiInfo}}
-- 'serve' comes from servant and hands you a WAI Application,
-- which you can think of as an "abstract" web application,
-- not yet a webserver.
run{{title}}App :: Application
run{{title}}App = serve (Proxy::Proxy {{title}}API) {{titleLower}}Server
{{/apiInfo}}

