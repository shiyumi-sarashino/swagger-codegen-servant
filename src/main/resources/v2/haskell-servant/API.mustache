{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE ViewPatterns #-}
{-# LANGUAGE InstanceSigs #-}
-- {-# OPTIONS_GHC -fno-warn-unused-binds -fno-warn-unused-imports -fcontext-stack=328 #-}

module {{title}}.API
  -- * Client and Server
  ( run{{title}}App
  , {{title}}Api
  ) where

import {{title}}.Types

import Data.Aeson (FromJSON(..), ToJSON(..), Value, withText)
import Data.Aeson.Types (Parser)
import Data.Proxy (Proxy(..))
import Data.Text (Text, unpack)
import Text.Read (readMaybe)
import Data.Text.Read (decimal)
import Data.Either (fromRight)
import Data.Tuple (fst)
import qualified Data.Text as T
import Data.Time.Calendar (fromGregorian)
import GHC.Generics (Generic)
import Network.HTTP.Types (status400)
import Servant (Server, serve, Handler)
import Servant.API
import Servant.API.Verbs (StdMethod(..), Verb)
import Servant.Checked.Exceptions (Envelope, ErrStatus(..), Throws, NoThrow, pureSuccEnvelope, pureErrEnvelope)
import Web.FormUrlEncoded(ToForm, FromForm)
import Network.Wai (Application)

{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}{{#hasFormParams}}
data {{vendorExtensions.x-formName}} = {{vendorExtensions.x-formName}}
  { {{#formParams}}{{vendorExtensions.x-formPrefix}}{{vendorExtensions.x-formParamName}} :: {{dataType}}{{#hasMore}}
  , {{/hasMore}}{{/formParams}}
  } deriving (Show, Eq, Generic)

instance FromFormUrlEncoded {{vendorExtensions.x-formName}}
instance ToFormUrlEncoded {{vendorExtensions.x-formName}}
    {{/hasFormParams}}{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}

{{#apiInfo}}
-- status code 4xx
{{#errStatuses}}{{#errStatus}}
data {{vendorExtensions.x-statusName}} = {{vendorExtensions.x-statusName}} deriving (Eq, Read, Show)
instance ToJSON {{vendorExtensions.x-statusName}} where
  toJSON :: {{vendorExtensions.x-statusName}} -> Value
  toJSON _ = toJSON . show $ "{{vendorExtensions.x-errMessage}}"
instance FromJSON {{vendorExtensions.x-statusName}} where
  parseJSON :: Value -> Parser {{vendorExtensions.x-statusName}}
  parseJSON = withText "{{vendorExtensions.x-statusName}}" $
    maybe (fail "failed with {{vendorExtensions.x-statusName}}") pure . readMaybe . T.unpack
instance ErrStatus {{vendorExtensions.x-statusName}} where
  toErrStatus :: {{vendorExtensions.x-statusName}} -> Status
  toErrStatus _ = status{{vendorExtensions.x-statusCode}}
{{/errStatus}}{{/errStatuses}}
{{/apiInfo}}

{{#apiInfo}}
-- | Servant type-level API, generated from the Swagger spec for {{title}}.
type {{title}}Api{{#apis}}{{#operations}}{{#if @first}}
    = {{else}}    :<|> {{/if}}{{#operation}}{{#if @first}}{{else}}    :<|> {{/if}}{{& vendorExtensions.x-routeType}} -- '{{operationId}}' route, tags: {{vendorExtensions.x-tags}}
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}

{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}
{{operationId}} :: {{& vendorExtensions.x-funcs}}
{{operationId}} {{#each vendorExtensions.x-args}}_ {{/each}}= pureSuccEnvelope $ {{vendorExtensions.example}}
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}

{{#apiInfo}}
{{titleLower}}Server :: Server {{title}}Api
{{titleLower}}Server {{#apis}}{{#operations}}
{{#if @first}}    =    {{else}}    :<|> {{/if}}{{#operation}}{{#if @first}}{{else}}
    :<|> {{/if}}{{operationId}}{{/operation}}{{/operations}}{{/apis}}
{{/apiInfo}}

{{#apiInfo}}
-- 'serve' comes from servant and hands you a WAI Application,
-- which you can think of as an "abstract" web application,
-- not yet a webserver.
run{{title}}App :: Application
run{{title}}App = serve (Proxy::Proxy {{title}}Api) {{titleLower}}Server
{{/apiInfo}}

