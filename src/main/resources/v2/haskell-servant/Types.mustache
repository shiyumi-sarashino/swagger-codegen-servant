{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# OPTIONS_GHC -fno-warn-unused-binds -fno-warn-unused-imports #-}
{-# LANGUAGE InstanceSigs #-}

module {{title}}.Types ({{#models}}{{#model}}{{#if vendorExtensions.x-arr}}{{else}}
  {{classname}} (..),{{#vars}}{{#if _enum}}
  {{vendorExtensions.x-nameUpper}} (..),{{/if}}{{/vars}}{{/if}}{{/model}}{{/models}}
  ) where

import Data.Time.Calendar (Day)
import Data.Time.Clock.POSIX (POSIXTime)
import Data.Char (toLower)
import Data.List (stripPrefix)
import Data.Maybe (fromMaybe)
import Text.Read (readMaybe)
import Data.Aeson (Value(..), FromJSON(..), ToJSON(..), genericToJSON, genericParseJSON, withText)
import Data.Aeson.Types (Options(..), defaultOptions, Parser)
import qualified Data.HashMap.Strict as HMS (lookup)
import Data.Text (Text, unpack)
import qualified Data.Text as T
import qualified Data.Map as Map
import GHC.Generics (Generic)
import Data.Function ((&))
import Network.HTTP.Types (Status(..){{#each status}}, status{{statusCode}}{{/each}}{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}{{#each vendorExtensions.x-additionalStatusCode}}, status{{this}}{{/each}}{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}})
import Servant.Checked.Exceptions (ErrStatus(..))
{{#imports}}import {{import}}
{{/imports}}

{{#apiInfo}}{{#if status}}-- common status code{{/if}}{{#each status}}
data {{name}} = {{name}} deriving (Eq, Read, Show)
instance ToJSON {{name}} where
  toJSON :: {{name}} -> Value
  toJSON _ = toJSON . show $ "{{& errMessage}}"
instance FromJSON {{name}} where
  parseJSON :: Value -> Parser {{name}}
  parseJSON = withText "{{name}}" $
    maybe (fail "could not parse as {{name}}") pure . readMaybe . unpack
instance ErrStatus {{name}} where
  toErrStatus :: {{name}} -> Status
  toErrStatus _ = status{{statusCode}}
{{/each}}{{/apiInfo}}
{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}{{#if vendorExtensions.x-ad-hocStatus}}-- {{operationId}} ad-hoc status code{{/if}}{{#each vendorExtensions.x-ad-hocStatus}}
data {{name}} = {{name}} deriving (Eq, Read, Show)
instance ToJSON {{name}} where
  toJSON :: {{name}} -> Value
  toJSON _ = toJSON . show $ "{{& errMessage}}"
instance FromJSON {{name}} where
  parseJSON :: Value -> Parser {{name}}
  parseJSON = withText "{{name}}" $
    maybe (fail "could not parse as {{name}}") pure . readMaybe . unpack
instance ErrStatus {{name}} where
  toErrStatus :: {{name}} -> Status
  toErrStatus _ = status{{statusCode}}
{{/each}}
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}

{{#models}}{{#model}}{{#if vendorExtensions.x-errType}}{{else}}{{#if vendorExtensions.x-arr}}{{else}}
-- | {{description}} {{operationId}}
{{^vendorExtensions.x-customNewtype}}{{^parent}}{{vendorExtensions.x-data}} {{classname}} = {{classname}}
{{#vars}}{{#if @first}}  { {{else}}  , {{/if}}{{& name}} :: {{#if _enum}}{{& vendorExtensions.x-nameUpper}}{{else}}{{datatype}}{{/if}} -- ^ {{& description}}
{{/vars}}  }deriving (Show, Eq, Generic)
instance FromJSON {{classname}} where
  parseJSON = genericParseJSON (removeFieldLabelPrefix "{{vendorExtensions.x-prefix}}")
instance ToJSON {{classname}} where
  toJSON = genericToJSON (removeFieldLabelPrefix "{{vendorExtensions.x-prefix}}")
{{#vars}}{{#if _enum}}
data {{& vendorExtensions.x-nameUpper}} = {{#each _enum}}{{#if @first}}{{else}} | {{/if}}{{capitalizeFirst this}}{{/each}} deriving (Eq, Generic)
instance Show {{& vendorExtensions.x-nameUpper}} where{{#each _enum}}
  show {{capitalizeFirst this}} = "{{this}}"{{/each}}
instance ToJSON {{& vendorExtensions.x-nameUpper}} where
  toJSON = toJSON . show
instance FromJSON {{& vendorExtensions.x-nameUpper}} where
  parseJSON (String t) = fromString (unpack t)
        where fromString :: String -> Parser {{& vendorExtensions.x-nameUpper}}{{#each _enum}}
              fromString "{{this}}" = pure {{capitalizeFirst this}}{{/each}}
              fromString _ = fail "not allowed value"
  parseJSON _ = fail "not allowed value"{{/if}}{{/vars}}
{{/parent}}{{#parent}}
newtype {{classname}} = {{classname}} { un{{classname}} :: {{parent}} }
  deriving (Show, Eq, FromJSON, ToJSON, Generic)
{{/parent}}{{/vendorExtensions.x-customNewtype}}{{#vendorExtensions.x-customNewtype}}
newtype {{classname}} = {{classname}} {{vendorExtensions.x-customNewtype}} deriving (Show, Eq, FromJSON, ToJSON, Generic)
{{/vendorExtensions.x-customNewtype}}{{/if}}{{/if}}{{/model}}{{/models}}

-- Remove a field label prefix during JSON parsing.
-- Also perform any replacements for special characters.
removeFieldLabelPrefix :: String -> Options
removeFieldLabelPrefix prefix =
  defaultOptions
  {fieldLabelModifier = fromMaybe (error ("did not find prefix " ++ prefix)) . headLower .  stripPrefix prefix . replaceSpecialChars}
  where
    headLower (Just (s:ss)) = Just $ (toLower s) : ss
    headLower _ = Nothing
    replaceSpecialChars field = foldl (&) field (map mkCharReplacement specialChars)
    specialChars =
      [ {{#specialCharReplacements}}("{{&char}}", "{{&replacement}}"){{#hasMore}}
      , {{/hasMore}}{{/specialCharReplacements}}
      ]
    mkCharReplacement (replaceStr, searchStr) = T.unpack . T.replace (T.pack searchStr) (T.pack replaceStr) . T.pack
